/* this is a file to make a lexographical parser with flex */
%{

#include <stdlib.h>
#include <string.h>
#include "y.tab.h" /* this is generated by bison */
#include "common.h"


int lineno = 0; /* start at line 0 */
%}

%%


[ \t]          /* Discard spaces and tabs */
"#".*\n       {/* eat comments */unput('\n');}
"--".*\n      {/* eat comments */unput('\n');}
"//".*\n      {/* eat comments */unput('\n');}

[A|a][D|d][D|d]             return (kADD);  /* Primary Instructions */
[A|a][D|d][D|d][I|i]        return (kADDI);
[A|a][D|d][D|d][I|i][U|u]   return (kADDIU);
[A|a][D|d][D|d][U|u]        return (kADDU);
[A|a][N|n][D|d]             return (kAND);
[A|a][N|n][D|d][I|i]        return (kANDI);
[B|b][E|e][Q|q]             return (kBEQ);
[B|b][N|n][E|e]             return (kBNE);
[J|j]                       return (kJ);
[J|j][A|a][L|l]             return (kJAL);
[J|j][R|r]                  return (kJR);
[L|l][B|b][U|u]             return (kLBU);
[L|l][H|h][U|u]             return (kLHU);
[L|l][U|u][I|i]             return (kLUI);
[L|l][W|w]                  return (kLW);
[L|l][L|l]                  return (kLL);
[T|t][S|s][L|l]             return (kTSL);
[N|n][O|o][R|r]             return (kNOR);
[O|o][R|r]                  return (kOR);
[O|o][R|r][I|i]             return (kORI);
[S|s][L|l][T|t]             return (kSLT);
[S|s][L|l][T|t][I|i]        return (kSLTI);
[S|s][L|l][T|t][I|i][U|u]   return (kSLTIU);
[S|s][L|l][T|t][U|u]        return (kSLTU);
[S|s][L|l][L|l]             return (kSLL);
[S|s][R|r][L|l]             return (kSRL);
[S|s][B|b]                  return (kSB);
[S|s][H|h]                  return (kSH);
[S|s][W|w]                  return (kSW);
[S|s][C|c]                  return (kSC);
[S|s][U|u][B|b]             return (kSUB);
[S|s][U|u][B|b][U|u]        return (kSUBU);
[X|x][O|o][R|r]             return (kXOR);
[X|x][O|o][R|r][I|i]        return (kXORI);

[N|n][O|o][P|p]             return (kNOP);
[H|h][A|a][L|l][T|t]        return (kHALT);


[P|p][U|u][S|s][H|h]        return (kPUSH); /* Pseudo Instructions */
[P|p][O|o][P|p]             return (kPOP);


[O|o][R|r][G|g]             return (kORG);  /* Other Instructions */
[C|c][H|h][W|w]             return (kCHW);
[C|c][F|f][W|w]             return (kCFW);

","                         return (COMMA);
"("                         return (LPAREN);
")"                         return (RPAREN);


[\n]    {/* parse new lines */lineno++; return (kNEWLINE); }

"0x"[0-9a-fA-F]+  { /* read hex values */
           yylval.number = strtol(yytext,(char **)NULL,16);
           return (INTEGER);
        }

[-]{0,1}[0-9]+  { /* read an integer positive or minus */
           yylval.number = strtol(yytext,(char **)NULL,10);
           return (INTEGER);
        }

[$]([0-9]|1[0-9]|2[0-9]|3[0-1]) { /* parse out registers by number */
            yylval.number = atoi(&yytext[1]);
            return (REG_NUM);
           }

[$][Z|z][E|e][R|r][O|o] { /* parse out registers by name */
            yylval.number = 0;
            return (REG_NUM);
}

[$][A|a][T|t] {
            yylval.number = 1;
            return (REG_NUM);
}

[$][V|v][0-1] {
            yylval.number = 2 + atoi(&yytext[2]);
            return (REG_NUM);
}

[$][A|a][0-3] {
            yylval.number = 4 + atoi(&yytext[2]);
            return (REG_NUM);
}

[$][T|t][0-7] {
            yylval.number = 8 + atoi(&yytext[2]);
            return (REG_NUM);
}

[$][S|s][0-7] {
            yylval.number = 16 + atoi(&yytext[2]);
            return (REG_NUM);
}

[$][T|t][8-9] {
            yylval.number = 16 + atoi(&yytext[2]);
            return (REG_NUM);
}

[$][K|k][0-1] {
            yylval.number = 26 + atoi(&yytext[2]);
            return (REG_NUM);
}

[$][G|g][P|p] {
            yylval.number = 28;
            return (REG_NUM);
}

[$][S|s][P|p] {
            yylval.number = 29;
            return (REG_NUM);
}

[$][F|f][P|p] {
            yylval.number = 30;
            return (REG_NUM);
}

[$][R|r][A|a] {
            yylval.number = 31;
            return (REG_NUM);
}

[$][E|e][P|p][C|c] { /* these are not used but i left them in for refernce */
            yylval.number = 0;
            return (REG_NUM);
}

[$][C|c][A|a][U|u][S|s][E|e] {
            yylval.number = 2;
            return (REG_NUM);
}

[a-zA-Z][a-zA-Z0-9_]*":" { /* parse labels declarations */
            yytext[strlen(yytext)-1] = '\0'; /* remove the : */
            yylval.string = (char *)strdup(yytext);
            return (LABEL_DEC);
         }

[a-zA-Z][a-zA-Z0-9_]* { /* parse labels used in instructions */
            yylval.string = (char *)strdup(yytext);
            return (LABEL);
         }

["][^"]*["] { /* parse out things between quotes */
      yytext[strlen(yytext)-1] = '\0'; /* remove the end quote */
      yylval.string = (char *)strdup(&yytext[1]); /* don't copy quote */
      return (STRING);
  }

.        {fprintf (stderr, "Line: %d Error (%s)\n", lineno, yytext);}
%%

void foo (void)
{
   yyunput (0, NULL);
}

